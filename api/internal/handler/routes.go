// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	channels "github.com/Hudayberdyyev/go-zero-playground/api/internal/handler/channels"
	feed "github.com/Hudayberdyyev/go-zero-playground/api/internal/handler/feed"
	playlists "github.com/Hudayberdyyev/go-zero-playground/api/internal/handler/playlists"
	reports "github.com/Hudayberdyyev/go-zero-playground/api/internal/handler/reports"
	search "github.com/Hudayberdyyev/go-zero-playground/api/internal/handler/search"
	trending "github.com/Hudayberdyyev/go-zero-playground/api/internal/handler/trending"
	userInteractions "github.com/Hudayberdyyev/go-zero-playground/api/internal/handler/userInteractions"
	userPlaylists "github.com/Hudayberdyyev/go-zero-playground/api/internal/handler/userPlaylists"
	videos "github.com/Hudayberdyyev/go-zero-playground/api/internal/handler/videos"
	"github.com/Hudayberdyyev/go-zero-playground/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.VersionVerification, serverCtx.OptionalAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/channels/:youtubeId",
					Handler: channels.GetChannelInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/channels/:youtubeId/videos",
					Handler: channels.GetChannelVideosHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/channels/:youtubeId/playlists",
					Handler: channels.GetChannelPlaylistsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.VersionVerification, serverCtx.OptionalAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/playlists/:playlistId",
					Handler: playlists.GetPlaylistInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/playlists/:playlistId/videos",
					Handler: playlists.GetPlaylistVideosHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.VersionVerification, serverCtx.RequiredAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/user/playlists",
					Handler: userPlaylists.GetUserPlaylistsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/playlists/:videoYoutubeId",
					Handler: userPlaylists.GetUserPlaylistsByVideoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.VersionVerification, serverCtx.OptionalAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/videos/:youtubeId",
					Handler: videos.GetVideoInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.VersionVerification, serverCtx.OptionalAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/search",
					Handler: search.SearchHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/suggestions",
					Handler: search.SuggestionsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.VersionVerification, serverCtx.OptionalAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/trending",
					Handler: trending.GetTrendingListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/genres",
					Handler: trending.GetGenresHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.VersionVerification, serverCtx.RequiredAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/reports/reasons",
					Handler: reports.GetReportTypesHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/reports",
					Handler: reports.GetUserReportsHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.VersionVerification, serverCtx.RequiredAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/feed/subscriptions",
					Handler: feed.SubscriptionsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/feed/channels",
					Handler: feed.FeedsChannelsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/feed/liked",
					Handler: feed.LikedVideosHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/feed/history",
					Handler: feed.HistoryHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/feed/library",
					Handler: feed.LibraryHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.VersionVerification, serverCtx.RequiredAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/channels/:youtubeId/subscription",
					Handler: userInteractions.ChannelSubscriptionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/videos/:youtubeId/reaction",
					Handler: userInteractions.VideoReactionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/videos/:youtubeId/view",
					Handler: userInteractions.VideoIncViewHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/videos/:youtubeId/watchedTime",
					Handler: userInteractions.VideoSetWatchTimeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/feedbacks",
					Handler: userInteractions.SendFeedBackHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/reports",
					Handler: userInteractions.SendReportHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/playlists",
					Handler: userInteractions.CreateUserPlaylistHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/playlists/:playlistId/video",
					Handler: userInteractions.AddVideoToPlaylistHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/user/playlists/:playlistId/video",
					Handler: userInteractions.DeleteVideoFromPlaylistHandler(serverCtx),
				},
				{
					Method:  http.MethodPatch,
					Path:    "/user/playlists/:playlistId",
					Handler: userInteractions.UpdateUserPlaylistHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/user/playlists/:playlistId",
					Handler: userInteractions.DeleteUserPlaylistHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/playlists/import",
					Handler: userInteractions.ImportYoutubePlaylistHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)
}
